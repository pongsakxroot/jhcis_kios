#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Remote Database Connection
"""

import mysql.connector
import json

def test_remote_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö remote database"""
    print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Remote...")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    try:
        with open('db_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
    except FileNotFoundError:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå db_config.json")
        return False
    
    print(f"Host: {config['host']}")
    print(f"Port: {config['port']}")
    print(f"User: {config['user']}")
    print(f"Database: {config['database']}")
    print(f"Password: {'(‡∏°‡∏µ)' if config['password'] else '(‡πÑ‡∏°‡πà‡∏°‡∏µ)'}")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        print("\nüîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
        conn = mysql.connector.connect(**config)
        cursor = conn.cursor()
        
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MySQL version
        cursor.execute("SELECT VERSION()")
        version = cursor.fetchone()
        print(f"üìä MySQL Version: {version[0]}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        cursor.execute("SHOW TABLES")
        tables = cursor.fetchall()
        table_names = [table[0] for table in tables]
        print(f"üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ ({len(table_names)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á): {', '.join(table_names[:10])}{'...' if len(table_names) > 10 else ''}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        important_tables = ['person', 'visit', 'chospital']
        for table in important_tables:
            if table in table_names:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á {table}: {count:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á {table}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á visit (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NHSO)
        if 'visit' in table_names:
            cursor.execute("DESCRIBE visit")
            fields = cursor.fetchall()
            field_names = [field[0] for field in fields]
            
            nhso_fields = ['claimcode_nhso', 'correlationid_nhso', 'datetime_claim']
            print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå NHSO ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á visit:")
            for field in nhso_fields:
                if field in field_names:
                    print(f"‚úÖ ‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå {field}")
                else:
                    print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå {field}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        if 'person' in table_names:
            cursor.execute("SELECT * FROM person LIMIT 1")
            sample_person = cursor.fetchone()
            if sample_person:
                print(f"\nüìÑ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• person: {sample_person}")
            else:
                print("\n‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á person")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!")
        return True
        
    except mysql.connector.Error as err:
        error_code = err.errno
        if error_code == 1045:
            print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        elif error_code == 2003:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö {config['host']}:{config['port']}")
            print("üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
            print("   - IP Address ‡πÅ‡∏•‡∏∞ Port ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
            print("   - Firewall ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
            print("   - MySQL Server ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        elif error_code == 1049:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '{config['database']}'")
        else:
            print(f"‚ùå MySQL Error {error_code}: {err}")
        return False
        
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô: {e}")
        return False

def add_nhso_fields():
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå NHSO ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á visit (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)"""
    print("\nüîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå NHSO...")
    
    try:
        with open('db_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        conn = mysql.connector.connect(**config)
        cursor = conn.cursor()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
        cursor.execute("DESCRIBE visit")
        fields = cursor.fetchall()
        field_names = [field[0] for field in fields]
        
        # ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
        nhso_fields = {
            'claimcode_nhso': 'VARCHAR(50)',
            'correlationid_nhso': 'VARCHAR(100)',
            'datetime_claim': 'DATETIME'
        }
        
        for field_name, field_type in nhso_fields.items():
            if field_name not in field_names:
                print(f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå {field_name}...")
                cursor.execute(f"ALTER TABLE visit ADD COLUMN {field_name} {field_type}")
                print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå {field_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                print(f"‚úÖ ‡∏ü‡∏¥‡∏•‡∏î‡πå {field_name} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        
        conn.commit()
        cursor.close()
        conn.close()
        
        print("üéâ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return True
        
    except mysql.connector.Error as err:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏î‡πâ: {err}")
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üåê ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Remote Database")
    print("=" * 50)
    
    if test_remote_connection():
        print("\n" + "=" * 50)
        choice = input("\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå NHSO ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á visit ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").lower()
        if choice == 'y':
            add_nhso_fields()
        
        print("\nüöÄ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô Flask app ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß:")
        print("python3 app.py")
    else:
        print("\n‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        print("\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
        print("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP Address ‡πÅ‡∏•‡∏∞ Port")
        print("2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username/password")
        print("3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Firewall")
        print("4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MySQL bind-address")

if __name__ == "__main__":
    main()